#!/bin/bash
#
# The 'run' performs a simple test that verifies the S2I image.
# The main focus here is to exercise the S2I scripts.
#
# For more information see the documentation:
#	https://github.com/openshift/source-to-image/blob/master/docs/builder_image.md
#
# IMAGE_NAME specifies a name of the candidate image used for testing.
# The image has to be available before this script is executed.
#
IMAGE_NAME=${IMAGE_NAME-vertx-s2i-candidate}

test_dir="$(dirname "${BASH_SOURCE[0]}")"
image_dir="${test_dir}/.."
scripts_url="file://${image_dir}/.s2i/bin"
cid_file=`mktemp`
sti_env=${STI_ENV-""}

BUILDER=${BUILDER-maven}

# Since we built the candidate image locally, we don't want S2I to attempt to pull
# it from Docker hub
sti_args="-s ${scripts_url}"

# Port the image exposes service to be tested
test_port=8080

image_exists() {
  docker inspect $1 &>/dev/null
}

container_exists() {
  image_exists $(cat ${cid_file})
}

container_ip() {
  echo `docker inspect --format="{{ .NetworkSettings.IPAddress }}" $(cat ${cid_file})`
  docker inspect --format="{{ .NetworkSettings.IPAddress }}" $(cat ${cid_file})
}

docker_machine_ip() {
  echo ${DOCKER_HOST} | awk -F'//' '{print $2}' | awk -F':' '{print $1}'
}

docker_machine_port() {
  echo `docker inspect --format='{{ (index (index .NetworkSettings.Ports "8080/tcp") 0).HostPort }}' $(cat ${cid_file})`
}

run_sti_build() {
  s2i build ${sti_args} ${sti_env} file://${test_dir}/test-app-${BUILDER} ${IMAGE_NAME} ${IMAGE_NAME}-testapp-${BUILDER}
}

prepare() {
  if ! image_exists ${IMAGE_NAME}; then
    echo "ERROR: The image ${IMAGE_NAME} must exist before this script is executed."
    exit 1
  fi
  # sti build requires the application is a valid 'GIT' repository
  pushd ${test_dir}/test-app-${BUILDER} >/dev/null
  git init
  git config user.email "build@localhost" && git config user.name "builder"
  git add -A && git commit -m "Sample commit"
  popd >/dev/null

  # CID file has been created, but docker now requires the CID file to not exist
  if [ -f ${cid_file} ]; then
    rm ${cid_file}
  fi

  run_sti_build
}

run_test_application() {
  docker run --rm --cidfile=${cid_file} -p ${test_port} ${IMAGE_NAME}-testapp-${BUILDER}
}

cleanup() {
  if [ -f ${cid_file} ]; then
    if container_exists; then
      docker stop $(cat ${cid_file})
    fi
  fi
  sleep 3
  if image_exists ${IMAGE_NAME}-testapp-${BUILDER}; then
    docker rmi -f ${IMAGE_NAME}-testapp-${BUILDER}
  fi
}

check_result() {
  local result="$1"
  if [[ "$result" != "0" ]]; then
    echo "S2I image '${IMAGE_NAME}' test FAILED (exit code: ${result})"
    cleanup
    exit ${result}
  fi
}

wait_for_cid() {
  local max_attempts=10
  local sleep_time=1
  local attempt=1
  local result=1
  while [ ${attempt} -le ${max_attempts} ]; do
    [ -f ${cid_file} ] && break
    echo "Waiting for container to start..."
    attempt=$(( $attempt + 1 ))
    sleep ${sleep_time}
  done
  if [ -f ${cid_file} ]; then
    echo "CID file created: $cid_file"
  else
    echo "CID file not created..."
  fi
}

test_usage() {
  echo "Testing 'sti usage'..."
  s2i usage ${sti_args} ${sti_env} ${IMAGE_NAME} &>/dev/null
}

test_connection() {
  echo "Testing HTTP connection..."
  local max_attempts=50
  local sleep_time=1
  local attempt=1
  local result=1
  while [ ${attempt} -le ${max_attempts} ]; do

    unamestr=`uname`
    if [[ "$unamestr" == 'Darwin' ]]; then
      # Mac os x, with docker-machine
      echo "Sending GET request to http://$(docker_machine_ip):$(docker_machine_port)/"
      response_code=$(curl -s -w "%{http_code}" -o /dev/null http://$(docker_machine_ip):$(docker_machine_port)/)
    else
      echo "Sending GET request to http://$(container_ip):${test_port}/"
      response_code=$(curl -s -w "%{http_code}" -o /dev/null http://$(container_ip):${test_port}/)
    fi
    status=$?
    if [ ${status} -eq 0 ]; then
      echo "We have a $response_code HTTP status code"
      if [ ${response_code} -eq 200 ]; then
        result=0
        # We move up the break, as it may take time to deploy the app
        break
      fi
    fi

    attempt=$(( $attempt + 1 ))
    sleep ${sleep_time}
  done
  return ${result}
}

# Build the application image twice to ensure the 'save-artifacts' and
# 'restore-artifacts' scripts are working properly
echo "============> Testing build process"
prepare
run_sti_build
echo "Testing build"
check_result $?

# Verify the 'usage' script is working properly
echo "============> Test usage"
test_usage
echo "Testing usage"
check_result $?

# Verify that the HTTP connection can be established to test application container
echo "============> Run application"
run_test_application &

# Wait for the container to write its CID file
echo "waiting cid file"
wait_for_cid

echo "testing connection"
test_connection
check_result $?

cleanup
